// Copyright 2019 Shintaro Tanikawa
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityMasterData.Interfaces;

namespace UnityMasterData {

    /// <summary>
    /// A singleton base class of manager of master data.
    /// 
    /// This class need MasterDataAccessorCollection that generated by MasterDataClassGenerator when loading.
    /// Before use this class, you need to prepare following here.
    /// 
    /// 1. Create/Update excel data files that has correct data formats in your project.
    /// 2. Generate master data classes with using MasterDataClassGenerator. (See also MasterDataClassGenerator.cs)
    /// 3. Export master data assets as ScriptableObject with using MasterDataExporter.
    /// 4. Create a class that extended this class in your project. (See also DemoMasterDataManager.cs)
    /// </summary>
    public abstract class MasterDataManagerBase<T> : MonoBehaviour where T : MasterDataManagerBase<T> {

        /// <summary>
        /// Get singleton instance, if exists; otherwise, instantiate then get.
        /// </summary>
        /// <value>A singleton instance</value>
        public static T Instance {
            get {
                if (_instance == null) {
                    _instance = FindObjectOfType<T> ();
                }
                if (_instance == null) {
                    GameObject obj = new GameObject (typeof (T).Name);
                    _instance = obj.AddComponent<T> ();
                }
                return _instance;
            }
        }

        private static T _instance;

        private Dictionary<Type, IMasterDataAccessorObject> _daoMap = new Dictionary<Type, IMasterDataAccessorObject> ();

        /// <summary>
        /// Async load master data with DAO collection.
        /// </summary>
        /// <param name="collection">DAO collection that generated in your project</param>
        /// <param name="onCompleted">Callback on completed loading</param>
        public void LoadAsync (IMasterDataAccessorObjectCollection collection, Action onCompleted = null) {
            StartCoroutine (LoadAsyncProc (collection, onCompleted));
        }

        /// <summary>
        /// Async load master data with MasterDataLoader.
        /// </summary>
        /// <param name="collection">DAO collection that generated in your project</param>
        /// <returns>An iteration to provide load async</returns>
        public IEnumerator LoadAsync (IMasterDataAccessorObjectCollection collection) {
            yield return LoadAsyncProc (collection);
        }

        /// <summary>
        /// Load immediately master data with MasterDataLoader.
        /// </summary>
        /// <param name="loader">DAO collection that generated in your project</param>
        public void LoadLocal (IMasterDataAccessorObjectCollection collection) {
            _daoMap.Clear ();
            foreach (var dao in collection) {
                LoadProc (dao);
                _daoMap.Add (dao.GetType (), dao);
            }
        }

        /// <summary>
        /// Get a data accessor object instance with its type.
        /// </summary>
        /// <typeparam name="DAO">DAO type</typeparam>
        /// <returns>DAO instance</returns>
        public DAO Get<DAO> () where DAO : IMasterDataAccessorObject {
            return (DAO) _daoMap[typeof (DAO)];
        }

        /// <summary>
        /// Defines a process how to load async the specified master data assets.
        /// See also DemoMasterDataManager.cs as a sample script.
        /// </summary>
        /// <param name="dao">An empty instance of DAO that will be a destination to load</param>
        /// <returns>An iteration to provide load async</returns>
        protected abstract IEnumerator LoadAsyncProc (IMasterDataAccessorObject dao);

        /// <summary>
        /// Defines a process how to load the specified master data assets.
        /// See also DemoMasterDataManager.cs as a sample script.
        /// </summary>
        /// <param name="dao">An empty instance of DAO that will be a destination to load</param>
        /// <returns>An iteration to provide load</returns>
        protected abstract void LoadProc (IMasterDataAccessorObject dao);

        private void Awake () {
            if (_instance == null) {
                _instance = (this as T);
                DontDestroyOnLoad (gameObject);
            } else {
                Destroy (gameObject);
            }
        }

        private IEnumerator LoadAsyncProc (IMasterDataAccessorObjectCollection collection, Action onCompleted = null) {
            _daoMap.Clear ();
            foreach (var dao in collection) {
                yield return LoadAsyncProc (dao);
                _daoMap.Add (dao.GetType (), dao);
            }
            if (onCompleted != null) {
                onCompleted.Invoke ();
            }
        }
    }
}